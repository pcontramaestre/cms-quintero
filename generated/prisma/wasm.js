
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  legal_name: 'legal_name',
  created_at: 'created_at',
  created_by: 'created_by',
  updated_at: 'updated_at',
  updated_by: 'updated_by',
  parent_account_id: 'parent_account_id'
};

exports.Prisma.AccountGeneralInfoScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  type: 'type',
  status: 'status',
  dba_name: 'dba_name',
  entity_type: 'entity_type',
  ein: 'ein',
  duns_number: 'duns_number',
  incorporation_date: 'incorporation_date',
  incorporation_state: 'incorporation_state',
  industry: 'industry',
  currency: 'currency',
  payment_terms: 'payment_terms',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AccountContactInfoScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  address_street: 'address_street',
  address_suite: 'address_suite',
  address_city: 'address_city',
  address_state: 'address_state',
  address_zip: 'address_zip',
  address_country: 'address_country',
  phone: 'phone',
  fax: 'fax',
  email: 'email',
  website: 'website',
  mailing_address_street: 'mailing_address_street',
  mailing_address_suite: 'mailing_address_suite',
  mailing_address_city: 'mailing_address_city',
  mailing_address_state: 'mailing_address_state',
  mailing_address_zip: 'mailing_address_zip',
  mailing_address_country: 'mailing_address_country',
  contact_name: 'contact_name',
  contact_title: 'contact_title',
  contact_phone: 'contact_phone',
  contact_email: 'contact_email',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AccountComplianceScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  license_numbers: 'license_numbers',
  insurance_info: 'insurance_info',
  invoice_prefix: 'invoice_prefix',
  logo_url: 'logo_url',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserAccountScalarFieldEnum = {
  user_id: 'user_id',
  account_id: 'account_id',
  role: 'role',
  created_at: 'created_at'
};

exports.Prisma.AccountAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  bio: 'bio',
  jobTitle: 'jobTitle',
  company: 'company',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  language: 'language',
  timezone: 'timezone',
  website: 'website',
  linkedin: 'linkedin',
  twitter: 'twitter',
  facebook: 'facebook',
  instagram: 'instagram',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProfileEmailScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  email: 'email',
  type: 'type',
  isPrimary: 'isPrimary',
  isVerified: 'isVerified',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProfilePhoneScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  phoneNumber: 'phoneNumber',
  type: 'type',
  isPrimary: 'isPrimary',
  isVerified: 'isVerified',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  client_type: 'client_type',
  name: 'name',
  company_name: 'company_name',
  tax_id: 'tax_id',
  website: 'website',
  notes: 'notes',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientPhoneScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  phone_number: 'phone_number',
  type: 'type',
  is_primary: 'is_primary',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientEmailScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  email: 'email',
  type: 'type',
  is_primary: 'is_primary',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientAddressScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  type: 'type',
  street: 'street',
  suite: 'suite',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  country: 'country',
  is_primary: 'is_primary',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientCompanyScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  name: 'name',
  tax_id: 'tax_id',
  website: 'website',
  notes: 'notes',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientCompanyPhoneScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  phone_number: 'phone_number',
  type: 'type',
  is_primary: 'is_primary',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientCompanyEmailScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  email: 'email',
  type: 'type',
  is_primary: 'is_primary',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientCompanyAddressScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  type: 'type',
  street: 'street',
  suite: 'suite',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  country: 'country',
  is_primary: 'is_primary',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UnitOfMeasureScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  name: 'name',
  symbol: 'symbol',
  description: 'description',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  name: 'name',
  description: 'description',
  price: 'price',
  unit_of_measure_id: 'unit_of_measure_id',
  is_discount: 'is_discount',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BillingScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  client_id: 'client_id',
  client_company_id: 'client_company_id',
  billing_date: 'billing_date',
  due_date: 'due_date',
  invoice_number: 'invoice_number',
  invoice_prefix: 'invoice_prefix',
  invoice_sequence: 'invoice_sequence',
  billing_address: 'billing_address',
  subtotal_amount: 'subtotal_amount',
  tax_amount: 'tax_amount',
  discount_amount: 'discount_amount',
  total_amount: 'total_amount',
  notes: 'notes',
  status: 'status',
  cancellation_date: 'cancellation_date',
  cancellation_reason: 'cancellation_reason',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
};

exports.Prisma.BillingItemScalarFieldEnum = {
  id: 'id',
  billing_id: 'billing_id',
  service_id: 'service_id',
  description: 'description',
  quantity: 'quantity',
  unit_price: 'unit_price',
  tax_percent: 'tax_percent',
  discount_percent: 'discount_percent',
  tax_amount: 'tax_amount',
  discount_amount: 'discount_amount',
  line_total: 'line_total',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
};

exports.Prisma.BankAccountScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  bank_name: 'bank_name',
  account_number: 'account_number',
  routing_number: 'routing_number',
  account_type: 'account_type',
  currency: 'currency',
  is_primary: 'is_primary',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PDFTemplateScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  name: 'name',
  description: 'description',
  is_default: 'is_default',
  primary_color: 'primary_color',
  secondary_color: 'secondary_color',
  font_family: 'font_family',
  show_logo: 'show_logo',
  show_watermark: 'show_watermark',
  show_qr_code: 'show_qr_code',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  emailVerified: 'emailVerified',
  image: 'image',
  reset_token: 'reset_token',
  reset_token_expires: 'reset_token_expires'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  legal_name: 'legal_name',
  created_by: 'created_by',
  updated_by: 'updated_by',
  parent_account_id: 'parent_account_id'
};

exports.Prisma.AccountGeneralInfoOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  dba_name: 'dba_name',
  ein: 'ein',
  duns_number: 'duns_number',
  incorporation_state: 'incorporation_state',
  industry: 'industry',
  currency: 'currency',
  payment_terms: 'payment_terms'
};

exports.Prisma.AccountContactInfoOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  address_street: 'address_street',
  address_suite: 'address_suite',
  address_city: 'address_city',
  address_state: 'address_state',
  address_zip: 'address_zip',
  address_country: 'address_country',
  phone: 'phone',
  fax: 'fax',
  email: 'email',
  website: 'website',
  mailing_address_street: 'mailing_address_street',
  mailing_address_suite: 'mailing_address_suite',
  mailing_address_city: 'mailing_address_city',
  mailing_address_state: 'mailing_address_state',
  mailing_address_zip: 'mailing_address_zip',
  mailing_address_country: 'mailing_address_country',
  contact_name: 'contact_name',
  contact_title: 'contact_title',
  contact_phone: 'contact_phone',
  contact_email: 'contact_email'
};

exports.Prisma.AccountComplianceOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  license_numbers: 'license_numbers',
  insurance_info: 'insurance_info',
  invoice_prefix: 'invoice_prefix',
  logo_url: 'logo_url',
  notes: 'notes'
};

exports.Prisma.UserAccountOrderByRelevanceFieldEnum = {
  user_id: 'user_id',
  account_id: 'account_id',
  role: 'role'
};

exports.Prisma.AccountAuthOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.ProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  bio: 'bio',
  jobTitle: 'jobTitle',
  company: 'company',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  language: 'language',
  timezone: 'timezone',
  website: 'website',
  linkedin: 'linkedin',
  twitter: 'twitter',
  facebook: 'facebook',
  instagram: 'instagram'
};

exports.Prisma.ProfileEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  email: 'email',
  type: 'type'
};

exports.Prisma.ProfilePhoneOrderByRelevanceFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  phoneNumber: 'phoneNumber',
  type: 'type'
};

exports.Prisma.ClientOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  name: 'name',
  company_name: 'company_name',
  tax_id: 'tax_id',
  website: 'website',
  notes: 'notes'
};

exports.Prisma.ClientPhoneOrderByRelevanceFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  phone_number: 'phone_number',
  type: 'type'
};

exports.Prisma.ClientEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  email: 'email',
  type: 'type'
};

exports.Prisma.ClientAddressOrderByRelevanceFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  type: 'type',
  street: 'street',
  suite: 'suite',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  country: 'country'
};

exports.Prisma.ClientCompanyOrderByRelevanceFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  name: 'name',
  tax_id: 'tax_id',
  website: 'website',
  notes: 'notes'
};

exports.Prisma.ClientCompanyPhoneOrderByRelevanceFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  phone_number: 'phone_number',
  type: 'type'
};

exports.Prisma.ClientCompanyEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  email: 'email',
  type: 'type'
};

exports.Prisma.ClientCompanyAddressOrderByRelevanceFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  type: 'type',
  street: 'street',
  suite: 'suite',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  country: 'country'
};

exports.Prisma.UnitOfMeasureOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  name: 'name',
  symbol: 'symbol',
  description: 'description'
};

exports.Prisma.ServiceOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  name: 'name',
  description: 'description',
  unit_of_measure_id: 'unit_of_measure_id'
};

exports.Prisma.BillingOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  client_id: 'client_id',
  client_company_id: 'client_company_id',
  invoice_number: 'invoice_number',
  invoice_prefix: 'invoice_prefix',
  billing_address: 'billing_address',
  notes: 'notes',
  cancellation_reason: 'cancellation_reason',
  created_by: 'created_by',
  updated_by: 'updated_by'
};

exports.Prisma.BillingItemOrderByRelevanceFieldEnum = {
  id: 'id',
  billing_id: 'billing_id',
  service_id: 'service_id',
  description: 'description',
  created_by: 'created_by',
  updated_by: 'updated_by'
};

exports.Prisma.BankAccountOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  bank_name: 'bank_name',
  account_number: 'account_number',
  routing_number: 'routing_number',
  account_type: 'account_type',
  currency: 'currency',
  description: 'description'
};

exports.Prisma.PDFTemplateOrderByRelevanceFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  name: 'name',
  description: 'description',
  primary_color: 'primary_color',
  secondary_color: 'secondary_color',
  font_family: 'font_family',
  created_by: 'created_by',
  updated_by: 'updated_by'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  name: 'name',
  image: 'image',
  reset_token: 'reset_token'
};
exports.AccountType = exports.$Enums.AccountType = {
  company: 'company',
  natural_person: 'natural_person',
  non_profit: 'non_profit',
  government: 'government',
  educational: 'educational'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended',
  closed: 'closed'
};

exports.EntityType = exports.$Enums.EntityType = {
  sole_proprietorship: 'sole_proprietorship',
  partnership: 'partnership',
  llc: 'llc',
  c_corporation: 'c_corporation',
  s_corporation: 's_corporation',
  non_profit: 'non_profit',
  other: 'other'
};

exports.ClientType = exports.$Enums.ClientType = {
  individual: 'individual',
  sole_proprietorship: 'sole_proprietorship',
  partnership: 'partnership',
  llc: 'llc',
  corporation: 'corporation',
  non_profit: 'non_profit',
  government: 'government',
  other: 'other'
};

exports.BillingStatus = exports.$Enums.BillingStatus = {
  draft: 'draft',
  sent: 'sent',
  paid: 'paid',
  cancelled: 'cancelled'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  AccountGeneralInfo: 'AccountGeneralInfo',
  AccountContactInfo: 'AccountContactInfo',
  AccountCompliance: 'AccountCompliance',
  UserAccount: 'UserAccount',
  AccountAuth: 'AccountAuth',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Profile: 'Profile',
  ProfileEmail: 'ProfileEmail',
  ProfilePhone: 'ProfilePhone',
  Client: 'Client',
  ClientPhone: 'ClientPhone',
  ClientEmail: 'ClientEmail',
  ClientAddress: 'ClientAddress',
  ClientCompany: 'ClientCompany',
  ClientCompanyPhone: 'ClientCompanyPhone',
  ClientCompanyEmail: 'ClientCompanyEmail',
  ClientCompanyAddress: 'ClientCompanyAddress',
  UnitOfMeasure: 'UnitOfMeasure',
  Service: 'Service',
  Billing: 'Billing',
  BillingItem: 'BillingItem',
  BankAccount: 'BankAccount',
  PDFTemplate: 'PDFTemplate',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
